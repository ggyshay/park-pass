{"version":3,"sources":["images/car_green.svg","images/car_red.svg","Components/button.tsx","pages/checkout.tsx","Components/input.tsx","data-interface.ts","pages/entrance.tsx","pages/exit.tsx","pages/home.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["module","exports","Button","props","className","onClick","text","LinkButton","Checkout","paramString","window","location","search","substr","split","value","parseFloat","toFixed","console","log","style","color","fontFamily","fontWeight","replace","Input","label","onChange","e","target","DI","plate","a","async","data","parklot_id","fetch","method","headers","body","JSON","stringify","res","json","Entrance","useState","setPlate","status","document","Exit","resJson","price","Home","to","textDecoration","src","require","App","path","Boolean","hostname","match","ReactDOM","render","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.96d9e896.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/car_green.a1deb1f6.svg\";","module.exports = __webpack_public_path__ + \"static/media/car_red.7b109091.svg\";","import React from \"react\";\nimport \"./button.css\";\n\nexport const Button = props => (\n  <div className=\"button-container\" onClick={props.onClick}>\n    <p className=\"button-text\">{props.text}</p>\n  </div>\n);\n\nexport const LinkButton = props => <p className=\"link-button\">{props.text}</p>;\n","import React from \"react\";\nimport { Button, LinkButton } from \"../Components/button\";\nimport \"./entrance.css\";\n\nexport const Checkout = () => {\n  const onClick = () => {\n    window.location.replace(\"/home\");\n  };\n  const paramString = window.location.search.substr(1).split(\"=\")[1];\n  const value = parseFloat(paramString).toFixed(2);\n  console.log(value);\n  return (\n    <div className=\"entrance-container\">\n      <div className=\"entrance-banner\">\n        <p className=\"entrance-banner-title\">Saída</p>\n        <h1\n          style={{\n            color: \"white\",\n            fontFamily: \"Open Sans\",\n            fontWeight: \"lighter\"\n          }}\n        >\n          R$ {value}\n        </h1>\n        <div>\n          <LinkButton text=\"Voltar\" />\n          <Button text=\"Recebido\" onClick={onClick} />\n        </div>\n      </div>\n    </div>\n  );\n};\n","import React from \"react\";\nimport \"./input.css\";\n\nexport const Input = props => (\n  <div className=\"input-container\">\n    <p className=\"input-label\">{props.label}</p>\n    <input\n      className=\"input-input\"\n      onChange={e => props.onChange(e.target.value)}\n      value={props.value}\n    />\n  </div>\n);\n","export const DI = {\n  registerCar: async plate => {\n    const data = {\n      plate,\n      parklot_id: 1\n    };\n    return await fetch(\"http://54.224.12.242/add_parklot_car\", {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json\"\n      },\n      body: JSON.stringify(data)\n    });\n  },\n\n  exitCar: async plate => {\n    const data = {\n      plate,\n      parklot_id: 1\n    };\n    const res = await fetch(\"http://54.224.12.242/exit_parklot_car\", {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json\"\n      },\n      body: JSON.stringify(data)\n    });\n    return await res.json();\n  }\n};\n","import React, { useState } from \"react\";\nimport \"./entrance.css\";\nimport { Input } from \"../Components/input\";\nimport { Button, LinkButton } from \"../Components/button\";\nimport { Link } from \"react-router-dom\";\nimport { DI } from \"../data-interface\";\n\nexport const Entrance = props => {\n  const [plate, setPlate] = useState(\"\");\n  const onClick = async () => {\n    const res = await DI.registerCar(plate);\n    if (res.status === 200) {\n      document.location.replace(\"/home\");\n    }\n  };\n  return (\n    <div className=\"entrance-container\">\n      <div className=\"entrance-banner\">\n        <p className=\"entrance-banner-title\">Entrada</p>\n        <Input label=\"Placa\" value={plate} onChange={setPlate} />\n        <div>\n          <LinkButton />\n          <Button text=\"Terminar\" onClick={onClick} />\n        </div>\n      </div>\n    </div>\n  );\n};\n","import React, { useState } from \"react\";\nimport { Button, LinkButton } from \"../Components/button\";\nimport { Input } from \"../Components/input\";\nimport { DI } from \"../data-interface\";\nimport \"./entrance.css\";\n\nexport const Exit = () => {\n  const [plate, setPlate] = useState(\"\");\n  const onClick = async () => {\n    const resJson = await DI.exitCar(plate);\n\n    window.location.replace(\"/checkout?price=\" + resJson.price);\n    console.log(resJson);\n  };\n  return (\n    <div className=\"entrance-container\">\n      <div className=\"entrance-banner\">\n        <p className=\"entrance-banner-title\">Saída</p>\n        <Input label=\"Placa\" value={plate} onChange={setPlate} />\n        <div>\n          <LinkButton text=\"Cancelar\" />\n          <Button text=\"Cobrança\" onClick={onClick} />\n        </div>\n      </div>\n    </div>\n  );\n};\n","import React from \"react\";\nimport { Link } from \"react-router-dom\";\nimport \"./home.css\";\n\nexport const Home = props => (\n  <div className=\"home-container\">\n    <div className=\"home-banner-container\">\n      <p className=\"home-banner-title\">Park Pass</p>\n      <div className=\"home-banner\">\n        <Link to=\"entrance\" style={{ textDecoration: \"none\" }}>\n          <div className=\"home-badge\">\n            <img\n              src={require(\"../images/car_green.svg\")}\n              className=\"car-icon\"\n            />\n            <p className=\"home-badge-text\">Entrada</p>\n          </div>\n        </Link>\n        <Link to=\"exit\" style={{ textDecoration: \"none\" }}>\n          <div className=\"home-badge\">\n            <img src={require(\"../images/car_red.svg\")} className=\"car-icon\" />\n            <p className=\"home-badge-text\">Saída</p>\n          </div>\n        </Link>\n      </div>\n    </div>\n  </div>\n);\n","import React from \"react\";\nimport { BrowserRouter as Router, Route, Switch } from \"react-router-dom\";\nimport \"./App.css\";\nimport { Checkout } from \"./pages/checkout\";\nimport { Entrance } from \"./pages/entrance\";\nimport { Exit } from \"./pages/exit\";\nimport { Home } from \"./pages/home\";\n\nconst App: React.FC = () => {\n  return (\n    <Router>\n      <div className=\"App\">\n        <Switch>\n          <Route path=\"/entrance\">\n            <Entrance />\n          </Route>\n          <Route path=\"/home\">\n            <Home />\n          </Route>\n          <Route path=\"/exit\">\n            <Exit />\n          </Route>\n          <Route path=\"/checkout\">\n            <Checkout />\n          </Route>\n        </Switch>\n      </div>\n    </Router>\n  );\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}