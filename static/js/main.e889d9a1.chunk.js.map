{"version":3,"sources":["images/car_green.svg","images/car_red.svg","Components/button.tsx","pages/checkout.tsx","Components/input.tsx","data-interface.ts","pages/entrance.tsx","pages/exit.tsx","pages/home.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["module","exports","Button","props","className","onClick","text","LinkButton","Checkout","style","color","fontFamily","fontWeight","price","setPath","Input","label","onChange","e","target","value","API_URL","DI","dueValue","registerCar","plate","a","async","fetch","headers","mode","exitCar","res","json","setDueValue","v","console","log","getDueValue","this","Entrance","useState","setPlate","Exit","resJson","finish","Home","src","require","App","setValue","path","p","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.e889d9a1.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/car_green.a1deb1f6.svg\";","module.exports = __webpack_public_path__ + \"static/media/car_red.7b109091.svg\";","import React from \"react\";\nimport \"./button.css\";\n\nexport const Button = props => (\n  <div className=\"button-container\" onClick={props.onClick}>\n    <p className=\"button-text\">{props.text}</p>\n  </div>\n);\n\nexport const LinkButton = props => <p className=\"link-button\">{props.text}</p>;\n","import React from \"react\";\nimport { Button, LinkButton } from \"../Components/button\";\nimport \"./entrance.css\";\nimport { DI } from \"../data-interface\";\n\nexport const Checkout = props => {\n  const onClick = () => {\n    // window.location.replace(\"/\");\n    props.setPath(\"\");\n  };\n  // const value = DI.getDueValue();\n  // console.log(value);\n  return (\n    <div className=\"entrance-container\">\n      <div className=\"entrance-banner\">\n        <p className=\"entrance-banner-title\">Saída</p>\n        <h1\n          style={{\n            color: \"white\",\n            fontFamily: \"Open Sans\",\n            fontWeight: \"lighter\"\n          }}\n        >\n          R$ {props.price}\n        </h1>\n        <div>\n          <LinkButton text=\"Voltar\" />\n          <Button text=\"Recebido\" onClick={onClick} />\n        </div>\n      </div>\n    </div>\n  );\n};\n","import React from \"react\";\nimport \"./input.css\";\n\nexport const Input = props => (\n  <div className=\"input-container\">\n    <p className=\"input-label\">{props.label}</p>\n    <input\n      className=\"input-input\"\n      onChange={e => props.onChange(e.target.value)}\n      value={props.value}\n    />\n  </div>\n);\n","const API_URL = \"https://ef41asg6e4.execute-api.us-east-1.amazonaws.com\";\n// const API_URL = \"http://54.224.12.242\";\n\nclass DIConstructor {\n  private dueValue;\n  constructor() {\n    this.dueValue = 0;\n  }\n  registerCar = async plate => {\n    // const data = {\n    //   plate,\n    //   parklot_id: 1\n    // };\n    return await fetch(\n      API_URL + `/add_parklot_car?plate=${plate}&parklot_id=1`,\n      {\n        headers: {\n          \"Access-Control-Allow-Origin\": \"*\"\n        },\n        mode: \"no-cors\"\n      }\n    );\n    // return await fetch(API_URL + \"/add_parklot_car\", {\n    //   method: \"POST\",\n    //   headers: {\n    //     \"Content-Type\": \"application/json\",\n    //     \"Access-Control-Allow-Origin\": \"*\",\n    //     Access: \"*\"\n    //   },\n    //   body: JSON.stringify(data)\n    // });\n  };\n\n  exitCar = async plate => {\n    // const data = {\n    //   plate,\n    //   parklot_id: 1\n    // };\n    const res = await fetch(\n      API_URL + `/exit_parklot_car?plate=${plate}&parklot_id=1`,\n      {\n        mode: \"no-cors\"\n      }\n    );\n    // const res = await fetch(API_URL + \"/exit_parklot_car\", {\n    //   method: \"POST\",\n    //   headers: {\n    //     \"Content-Type\": \"application/json\"\n    //   },\n    //   body: JSON.stringify(data)\n    // });\n    return await res.json();\n  };\n  setDueValue = v => {\n    console.log(\"new v\", v);\n    this.dueValue = v;\n  };\n  getDueValue = () => this.dueValue;\n}\n\nexport const DI = new DIConstructor();\n\n// export function xfetch(...args) {\n//   // tell the proxy to make the request\n//   const ms = new MessageChannel();\n//   popup.postMessage(args, \"*\", [ms.port1]);\n\n//   // Resolves when the headers comes\n//   return new Promise((rs, rj) => {\n//     // First message will resolve the Response Object\n//     ms.port2.onmessage = ({ data }) => {\n//       const stream = new ReadableStream({\n//         start(controller) {\n//           // Change the onmessage to pipe the remaning request\n//           ms.port2.onmessage = evt => {\n//             if (evt.data === true)\n//               // Done?\n//               controller.close();\n//             // enqueue the buffer to the stream\n//             else controller.enqueue(evt.data);\n//           };\n//         }\n//       });\n\n//       // Construct a new response with the\n//       // response headers and a stream\n//       rs(new Response(stream, data));\n//     };\n//   });\n// }\n","import React, { useState } from \"react\";\nimport \"./entrance.css\";\nimport { Input } from \"../Components/input\";\nimport { Button, LinkButton } from \"../Components/button\";\nimport { Link } from \"react-router-dom\";\nimport { DI } from \"../data-interface\";\n\nexport const Entrance = props => {\n  const [plate, setPlate] = useState(\"\");\n  const onClick = async () => {\n    const res = await DI.registerCar(plate);\n    console.log(res);\n    props.setPath(\"\");\n  };\n  return (\n    <div className=\"entrance-container\">\n      <div className=\"entrance-banner\">\n        <p className=\"entrance-banner-title\">Entrada</p>\n        <Input label=\"Placa\" value={plate} onChange={setPlate} />\n        <div>\n          <LinkButton />\n          <Button text=\"Terminar\" onClick={onClick} />\n        </div>\n      </div>\n    </div>\n  );\n};\n","import React, { useState } from \"react\";\nimport { Button, LinkButton } from \"../Components/button\";\nimport { Input } from \"../Components/input\";\nimport { DI } from \"../data-interface\";\nimport \"./entrance.css\";\n\nexport const Exit = props => {\n  const [plate, setPlate] = useState(\"\");\n  const onClick = async () => {\n    const resJson = await DI.exitCar(plate);\n    props.finish(\"checkout\", resJson.price);\n  };\n  return (\n    <div className=\"entrance-container\">\n      <div className=\"entrance-banner\">\n        <p className=\"entrance-banner-title\">Saída</p>\n        <Input label=\"Placa\" value={plate} onChange={setPlate} />\n        <div>\n          <LinkButton text=\"Cancelar\" />\n          <Button text=\"Cobrança\" onClick={onClick} />\n        </div>\n      </div>\n    </div>\n  );\n};\n","import React from \"react\";\nimport \"./home.css\";\n\nexport const Home = props => (\n  <div className=\"home-container\">\n    <div className=\"home-banner-container\">\n      <p className=\"home-banner-title\">Park Pass</p>\n      <div className=\"home-banner\">\n        <div className=\"home-badge\" onClick={() => props.setPath(\"entrance\")}>\n          <img src={require(\"../images/car_green.svg\")} className=\"car-icon\" />\n          <p className=\"home-badge-text\">Entrada</p>\n        </div>\n        <div className=\"home-badge\" onClick={() => props.setPath(\"exit\")}>\n          <img src={require(\"../images/car_red.svg\")} className=\"car-icon\" />\n          <p className=\"home-badge-text\">Saída</p>\n        </div>\n      </div>\n    </div>\n  </div>\n);\n","import React, { useState } from \"react\";\nimport \"./App.css\";\nimport { Checkout } from \"./pages/checkout\";\nimport { Entrance } from \"./pages/entrance\";\nimport { Exit } from \"./pages/exit\";\nimport { Home } from \"./pages/home\";\n\nconst App: React.FC = () => {\n  const [value, setValue] = useState(0);\n  const [path, setPath] = useState(\"\");\n  console.log(\"version 3\");\n  // const path = document.location.search;\n  console.log(value);\n  const watch = v => {\n    console.log(\"setValue\", v);\n    setValue(v);\n  };\n\n  const exitNavigate = (p, v) => {\n    console.log(p, v);\n    setPath(p);\n    setValue(v);\n  };\n  switch (path) {\n    case \"\":\n      return <Home setPath={setPath} />;\n    case \"entrance\":\n      return <Entrance setPath={setPath} />;\n    case \"exit\":\n      return <Exit finish={exitNavigate} />;\n    case \"checkout\":\n      return <Checkout price={value} setPath={setPath} />;\n    default:\n      return null;\n  }\n  // return (\n  //   <Router>\n  //     <div className=\"App\">\n  //       <Switch>\n  //         <Route path=\"/entrance\">\n  //           <Entrance />\n  //         </Route>\n  //         <Route exact path=\"/\"></Route>\n  //         <Route path=\"/exit\">\n  //           <Exit />\n  //         </Route>\n  //         <Route path=\"/checkout\">\n  //           <Checkout />\n  //         </Route>\n  //       </Switch>\n  //     </div>\n  // </Router>\n  // );\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}